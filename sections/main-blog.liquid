{{ 'component-article-card.css' | asset_url | stylesheet_tag }}
{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-collection-hero.css' | asset_url | stylesheet_tag }}
{{ 'nue-blog-posts.css' | asset_url | stylesheet_tag }}
{{ 'section-main-blog.css' | asset_url | stylesheet_tag }}

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const tagItems = document.querySelectorAll('.blog-tags__item');
    const tagLinks = document.querySelectorAll('.blog-tags__link');
    const blogTags = document.querySelector('.blog-tags');
    
    // Store the true active item
    let trueActiveItem = document.querySelector('.blog-tags__item--active');
    
    tagLinks.forEach(link => {
      link.addEventListener('click', function(e) {
        // Remove active class from all items
        tagItems.forEach(item => {
          item.classList.remove('blog-tags__item--active');
          // Remove active dot if it exists
          const activeDot = item.querySelector('.blog-tags__active-dot');
          if (activeDot) {
            activeDot.remove();
          }
        });
        
        // Add active class to clicked item
        const clickedItem = this.closest('.blog-tags__item');
        clickedItem.classList.add('blog-tags__item--active');
        trueActiveItem = clickedItem; // Update the true active item
        
        // Add active dot
        const dot = document.createElement('span');
        dot.className = 'blog-tags__active-dot';
        this.appendChild(dot);
      });
      
      // Handle hover (desktop only)
      link.addEventListener('mouseenter', function() {
        // Skip hover effects on mobile
        if (window.innerWidth < 750) return;
        
        // Remove active class from all items
        tagItems.forEach(item => {
          item.classList.remove('blog-tags__item--active');
          // Hide active dot if it exists
          const activeDot = item.querySelector('.blog-tags__active-dot');
          if (activeDot) {
            activeDot.style.display = 'none';
          }
        });
        
        // Add active class to hovered item
        const hoveredItem = this.closest('.blog-tags__item');
        hoveredItem.classList.add('blog-tags__item--active');
        
        // Add temporary active dot if doesn't exist
        if (!this.querySelector('.blog-tags__active-dot')) {
          const dot = document.createElement('span');
          dot.className = 'blog-tags__active-dot blog-tags__active-dot--temp';
          this.appendChild(dot);
        } else {
          this.querySelector('.blog-tags__active-dot').style.display = 'block';
        }
      });
    });
    
    // Handle mouse leave from entire tags section (desktop only)
    if (blogTags) {
      blogTags.addEventListener('mouseleave', function() {
        // Skip hover effects on mobile
        if (window.innerWidth < 750) return;
        
        // Remove all active states and temp dots
        tagItems.forEach(item => {
          item.classList.remove('blog-tags__item--active');
          const tempDot = item.querySelector('.blog-tags__active-dot--temp');
          if (tempDot) {
            tempDot.remove();
          }
          const activeDot = item.querySelector('.blog-tags__active-dot');
          if (activeDot) {
            activeDot.style.display = 'none';
          }
        });
        
        // Restore true active state
        if (trueActiveItem) {
          trueActiveItem.classList.add('blog-tags__item--active');
          const activeDot = trueActiveItem.querySelector('.blog-tags__active-dot');
          if (activeDot) {
            activeDot.style.display = 'block';
          }
        }
      });
    }
  });
</script>

<style>
  /* Apply collection-hero styles to blog tags */
  .blog-tags {
    margin-top: 60px;
  }
  
  .blog-tags__inner {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 8px;
    padding: 16px;
    margin-bottom: 12px;
  }
  
  .blog-tags__link {
    text-decoration: none;
    color: inherit;
    display: inline-block;
    position: relative;
  }
  
  .blog-tags__active-dot {
    position: absolute;
    width: 4px;
    height: 4px;
    background-color: var(--color-nue-green);
    border-radius: 50%;
    left: 50%;
    transform: translateX(-50%);
    bottom: -6px;
  }
  
  .blog-tags__item:not(.blog-tags__item--active) .blog-tags__link::after {
    content: '';
    position: absolute;
    width: 4px;
    height: 4px;
    background-color: var(--color-nue-green);
    border-radius: 50%;
    left: 50%;
    transform: translateX(-50%);
    bottom: -6px;
    opacity: 0;
    transition: opacity 0.2s ease;
  }
  
  .blog-tags__item-title {
    font-size: 18px;
    font-weight: 300;
    margin: 0;
  }
  
  @media screen and (min-width: 750px) {
    .blog-tags {
      margin-top: 86px;
    }
    
    .blog-tags__inner {
      gap: 35px;
      padding: 38px 16px;
      margin-bottom: 60px;
    }
    
    .blog-tags__item:not(.blog-tags__item--active) .blog-tags__link:hover::after {
      opacity: 1;
    }
    
    .blog-tags__item-title {
      font-size: 40px;
    }
    
    .blog-tags__active-dot {
      width: 10px;
      height: 10px;
      bottom: -12px;
    }
    
    .blog-tags__item:not(.blog-tags__item--active) .blog-tags__link::after {
      width: 10px;
      height: 10px;
      bottom: -12px;
    }
  }
  
  /* Bundle wrapper styles */
  .blog-articles__bundle-wrapper .nue-bundle-3-column.full-width .nue-bundle-3-column__content {
    padding-top: 36px;
    padding-bottom: 36px;
  }
  
  @media screen and (min-width: 750px) {
    .blog-articles__bundle-wrapper {
      /* margin-top: 60px;
      margin-bottom: 60px; */
    }
  }
  
  /* Quote block styles */
  .blog-articles__quote-wrapper {
    grid-column: 1 / -1;
    margin: 40px 0;
  }
  
  .blog-quote-block {
    text-align: center;
    /* padding: 60px 20px; */
  }
  
  .blog-quote-block__quote {
    font-size: 32px;
    font-weight: 250;
    letter-spacing: -0.02em;
    line-height: 36px;
    margin: 0 auto 20px;
    max-width: 1187px;
    font-family: Canela, Assistant, sans-serif;
    font-style: var(--font-heading-style);
  }
  
  .blog-quote-block__author {
    font-size: 18px;
    font-weight: 250;
    letter-spacing: -0.02em;
    line-height: 20px;
    margin: 0;
    font-family: Canela, Assistant, sans-serif;
    font-style: var(--font-heading-style);
  }
  
  @media screen and (min-width: 750px) {
    .blog-articles__quote-wrapper {
      margin: 60px 0;
    }
    
    .blog-quote-block {
      /* padding: 80px 40px; */
    }
    
    .blog-quote-block__quote {
      font-size: 104px;
      line-height: 104px;
      margin-bottom: 40px;
    }
    
    .blog-quote-block__author {
      font-size: 38px;
      line-height: 38px;
    }
  }
</style>

{%- style -%}
  .section-{{ section.id }}-padding {
    /* padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px; */
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      /* padding-top: {{ section.settings.padding_top }}px; */
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

{%- paginate blog.articles by 12 -%}
  {%- comment -%} Tag Navigation - Collection Hero Style {%- endcomment -%}
  <div class="blog-tags collection-hero">
    <div class="blog-tags__inner collection-hero__inner page-width">
      {%- comment -%} All link {%- endcomment -%}
      <div class="blog-tags__item collection-hero__item{% unless current_tags %} blog-tags__item--active collection-hero__item--active{% endunless %}">
        <a href="{{ blog.url }}" class="blog-tags__link collection-hero__link">
          <h2 class="blog-tags__item-title collection-hero__item-title">All</h2>
          {% unless current_tags %}
            <span class="blog-tags__active-dot collection-hero__active-dot"></span>
          {% endunless %}
        </a>
      </div>
      
      {%- comment -%} Tag blocks {%- endcomment -%}
      {% for block in section.blocks %}
        {% if block.type == 'tag' and block.settings.tag != blank %}
          {%- assign tag_handle = block.settings.tag | handle -%}
          {%- assign is_active = false -%}
          {%- for tag in current_tags -%}
            {%- if tag == block.settings.tag -%}
              {%- assign is_active = true -%}
              {%- break -%}
            {%- endif -%}
          {%- endfor -%}
          
          <div class="blog-tags__item collection-hero__item{% if is_active %} blog-tags__item--active collection-hero__item--active{% endif %}" {{ block.shopify_attributes }}>
            <a href="{{ blog.url }}/tagged/{{ tag_handle }}" class="blog-tags__link collection-hero__link">
              <h2 class="blog-tags__item-title collection-hero__item-title">
                {% if block.settings.label != blank %}
                  {{ block.settings.label | escape }}
                {% else %}
                  {{ block.settings.tag | escape }}
                {% endif %}
              </h2>
              {% if is_active %}
                <span class="blog-tags__active-dot collection-hero__active-dot"></span>
              {% endif %}
            </a>
          </div>
        {% endif %}
      {% endfor %}
    </div>
  </div>
  
  <div class="main-blog page-width section-{{ section.id }}-padding">
    {% comment %} <h1 class="title--primary{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--fade-in{% endif %}">
      {{ blog.title | escape }}
    </h1> {% endcomment %}

    <div class="blog-articles {% if section.settings.layout == 'collage' %}blog-articles--collage{% endif %}">
      {%- assign bundle_blocks = section.blocks | where: 'type', 'nue_bundle_3_column' -%}
      {%- assign quote_blocks = section.blocks | where: 'type', 'quote_block' -%}
      {%- assign articles_per_row = 2 -%}
      {%- comment -%} 2 columns on desktop {%- endcomment -%}
      {%- assign current_row = 1 -%}
      {%- assign article_count = 0 -%}
      
      {%- comment -%} Check for bundles at row 1 before any articles {%- endcomment -%}
      {%- for bundle_block in bundle_blocks -%}
        {%- assign should_show = false -%}
        
        {%- if current_tags == blank -%}
          {%- comment -%} No tags active - only show bundles set to 'all' {%- endcomment -%}
          {%- if bundle_block.settings.tag_visibility == 'all' or bundle_block.settings.tag_visibility == blank -%}
            {%- assign should_show = true -%}
          {%- endif -%}
        {%- else -%}
          {%- comment -%} Tag filter active - only show bundles matching that specific tag {%- endcomment -%}
          {%- for tag in current_tags -%}
            {%- assign tag_lower = tag | downcase -%}
            {%- if tag_lower == bundle_block.settings.tag_visibility -%}
              {%- assign should_show = true -%}
              {%- break -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endif -%}
        
        {%- if should_show and bundle_block.settings.row_position == 1 -%}
          <div class="blog-articles__bundle-wrapper" style="grid-column: 1 / -1;">
            {% render 'article-bundle-3-column', block: bundle_block, lazy_load: false %}
          </div>
        {%- endif -%}
      {%- endfor -%}
      
      {%- comment -%} Check for quote blocks at row 1 before any articles {%- endcomment -%}
      {%- for quote_block in quote_blocks -%}
        {%- assign should_show = false -%}
        
        {%- if current_tags == blank -%}
          {%- comment -%} No tags active - only show quotes set to 'all' {%- endcomment -%}
          {%- if quote_block.settings.tag_visibility == 'all' or quote_block.settings.tag_visibility == blank -%}
            {%- assign should_show = true -%}
          {%- endif -%}
        {%- else -%}
          {%- comment -%} Tag filter active - only show quotes matching that specific tag {%- endcomment -%}
          {%- for tag in current_tags -%}
            {%- assign tag_lower = tag | downcase -%}
            {%- if tag_lower == quote_block.settings.tag_visibility -%}
              {%- assign should_show = true -%}
              {%- break -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endif -%}
        
        {%- if should_show and quote_block.settings.row_position == 1 and paginate.current_page == 1 -%}
          <div class="blog-articles__quote-wrapper">
            <div class="blog-quote-block">
              {%- if quote_block.settings.quote != blank -%}
                <p class="blog-quote-block__quote">{{ quote_block.settings.quote }}</p>
              {%- endif -%}
              {%- if quote_block.settings.author != blank -%}
                <p class="blog-quote-block__author">{{ quote_block.settings.author }}</p>
              {%- endif -%}
            </div>
          </div>
        {%- endif -%}
      {%- endfor -%}
      
      {%- for article in blog.articles -%}
        {%- assign article_count = article_count | plus: 1 -%}
        
        {%- comment -%} Calculate current row based on article count {%- endcomment -%}
        {%- assign new_row = article_count | minus: 1 | divided_by: articles_per_row | plus: 1 -%}
        
        {%- comment -%} Check if we've moved to a new row {%- endcomment -%}
        {%- if new_row > current_row -%}
          {%- assign current_row = new_row -%}
          
          {%- comment -%} Check for bundles at this row position {%- endcomment -%}
          {%- for bundle_block in bundle_blocks -%}
            {%- assign should_show = false -%}
            
            {%- if current_tags == blank -%}
              {%- comment -%} No tags active - only show bundles set to 'all' {%- endcomment -%}
              {%- if bundle_block.settings.tag_visibility == 'all' or bundle_block.settings.tag_visibility == blank -%}
                {%- assign should_show = true -%}
              {%- endif -%}
            {%- else -%}
              {%- comment -%} Tag filter active - only show bundles matching that specific tag {%- endcomment -%}
              {%- for tag in current_tags -%}
                {%- assign tag_lower = tag | downcase -%}
                {%- if tag_lower == bundle_block.settings.tag_visibility -%}
                  {%- assign should_show = true -%}
                  {%- break -%}
                {%- endif -%}
              {%- endfor -%}
            {%- endif -%}
            
            {%- if should_show and bundle_block.settings.row_position == current_row -%}
              <div class="blog-articles__bundle-wrapper" style="grid-column: 1 / -1;">
                {% render 'article-bundle-3-column', block: bundle_block, lazy_load: true %}
              </div>
            {%- endif -%}
          {%- endfor -%}
          
          {%- comment -%} Check for quote blocks at this row position {%- endcomment -%}
          {%- for quote_block in quote_blocks -%}
            {%- assign should_show = false -%}
            
            {%- if current_tags == blank -%}
              {%- comment -%} No tags active - only show quotes set to 'all' {%- endcomment -%}
              {%- if quote_block.settings.tag_visibility == 'all' or quote_block.settings.tag_visibility == blank -%}
                {%- assign should_show = true -%}
              {%- endif -%}
            {%- else -%}
              {%- comment -%} Tag filter active - only show quotes matching that specific tag {%- endcomment -%}
              {%- for tag in current_tags -%}
                {%- assign tag_lower = tag | downcase -%}
                {%- if tag_lower == quote_block.settings.tag_visibility -%}
                  {%- assign should_show = true -%}
                  {%- break -%}
                {%- endif -%}
              {%- endfor -%}
            {%- endif -%}
            
            {%- if should_show and quote_block.settings.row_position == current_row and paginate.current_page == 1 -%}
              <div class="blog-articles__quote-wrapper">
                <div class="blog-quote-block">
                  {%- if quote_block.settings.quote != blank -%}
                    <p class="blog-quote-block__quote">{{ quote_block.settings.quote }}</p>
                  {%- endif -%}
                  {%- if quote_block.settings.author != blank -%}
                    <p class="blog-quote-block__author">{{ quote_block.settings.author }}</p>
                  {%- endif -%}
                </div>
              </div>
            {%- endif -%}
          {%- endfor -%}
        {%- endif -%}
        
        <div class="blog-articles__article article">
          {%- render 'nue-card-article',
            article: article,
            animation_order: article_count
          -%}
        </div>
      {%- endfor -%}
      
      {%- comment -%} Check for bundles positioned after all articles {%- endcomment -%}
      {%- assign final_row = current_row | plus: 1 -%}
      {%- for bundle_block in bundle_blocks -%}
        {%- assign should_show = false -%}
        
        {%- if current_tags == blank -%}
          {%- comment -%} No tags active - only show bundles set to 'all' {%- endcomment -%}
          {%- if bundle_block.settings.tag_visibility == 'all' or bundle_block.settings.tag_visibility == blank -%}
            {%- assign should_show = true -%}
          {%- endif -%}
        {%- else -%}
          {%- comment -%} Tag filter active - only show bundles matching that specific tag {%- endcomment -%}
          {%- for tag in current_tags -%}
            {%- assign tag_lower = tag | downcase -%}
            {%- if tag_lower == bundle_block.settings.tag_visibility -%}
              {%- assign should_show = true -%}
              {%- break -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endif -%}
        
        {%- if should_show and bundle_block.settings.row_position >= final_row -%}
          <div class="blog-articles__bundle-wrapper" style="grid-column: 1 / -1;">
            {% render 'article-bundle-3-column', block: bundle_block, lazy_load: true %}
          </div>
        {%- endif -%}
      {%- endfor -%}
      
      {%- comment -%} Check for quote blocks positioned after all articles {%- endcomment -%}
      {%- for quote_block in quote_blocks -%}
        {%- assign should_show = false -%}
        
        {%- if current_tags == blank -%}
          {%- comment -%} No tags active - only show quotes set to 'all' {%- endcomment -%}
          {%- if quote_block.settings.tag_visibility == 'all' or quote_block.settings.tag_visibility == blank -%}
            {%- assign should_show = true -%}
          {%- endif -%}
        {%- else -%}
          {%- comment -%} Tag filter active - only show quotes matching that specific tag {%- endcomment -%}
          {%- for tag in current_tags -%}
            {%- assign tag_lower = tag | downcase -%}
            {%- if tag_lower == quote_block.settings.tag_visibility -%}
              {%- assign should_show = true -%}
              {%- break -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endif -%}
        
        {%- if should_show and quote_block.settings.row_position >= final_row and paginate.current_page == 1 -%}
          <div class="blog-articles__quote-wrapper">
            <div class="blog-quote-block">
              {%- if quote_block.settings.quote != blank -%}
                <p class="blog-quote-block__quote">{{ quote_block.settings.quote }}</p>
              {%- endif -%}
              {%- if quote_block.settings.author != blank -%}
                <p class="blog-quote-block__author">{{ quote_block.settings.author }}</p>
              {%- endif -%}
            </div>
          </div>
        {%- endif -%}
      {%- endfor -%}
    </div>

    {%- if paginate.pages > 1 -%}
      {%- render 'pagination', paginate: paginate -%}
    {%- endif -%}
  </div>
{%- endpaginate -%}
<script>
document.addEventListener('DOMContentLoaded', function() {
  const ratingElements = document.querySelectorAll('.nue-bundle-3-column__rating[data-product-id]');
  const appKey = 'hAQoLTsYGZYkd1hFPhK5g8rrcly7yHFLLB5CKDZB';

  async function fetchBundleRating(productId) {
    try {
      const url = `https://api-cdn.yotpo.com/v1/widget/${appKey}/products/${productId}/reviews.json?per_page=1&page=1`;
      const response = await fetch(url);
      const data = await response.json();

      if (data.response && data.response.bottomline) {
        const bottomline = data.response.bottomline;
        return {
          rating: bottomline.average_score ? bottomline.average_score.toFixed(1) : '0',
          count: bottomline.total_review || 0
        };
      }
    } catch (error) {
      console.error('Error fetching bundle rating:', error);
    }
    return null;
  }

  ratingElements.forEach(async (element) => {
    const productId = element.dataset.productId;
    if (productId) {
      const ratingData = await fetchBundleRating(productId);
      if (ratingData && ratingData.rating && ratingData.count > 0) {
        element.innerHTML = `${ratingData.rating} Rating`;
      } else {
        // Hide the rating element if no reviews
        element.style.display = 'none';
      }
    }
  });
});
</script>
{% schema %}
{
  "name": "t:sections.main-blog.name",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "select",
      "id": "layout",
      "options": [
        {
          "value": "grid",
          "label": "t:sections.main-blog.settings.layout.options__1.label"
        },
        {
          "value": "collage",
          "label": "t:sections.main-blog.settings.layout.options__2.label"
        }
      ],
      "default": "collage",
      "label": "t:sections.main-blog.settings.layout.label"
    },
    {
      "type": "checkbox",
      "id": "show_image",
      "default": true,
      "label": "t:sections.main-blog.settings.show_image.label"
    },
    {
      "type": "select",
      "id": "image_height",
      "options": [
        {
          "value": "adapt",
          "label": "t:sections.main-blog.settings.image_height.options__1.label"
        },
        {
          "value": "small",
          "label": "t:sections.main-blog.settings.image_height.options__2.label"
        },
        {
          "value": "medium",
          "label": "t:sections.main-blog.settings.image_height.options__3.label"
        },
        {
          "value": "large",
          "label": "t:sections.main-blog.settings.image_height.options__4.label"
        }
      ],
      "default": "medium",
      "label": "t:sections.main-blog.settings.image_height.label"
    },
    {
      "type": "checkbox",
      "id": "show_date",
      "default": true,
      "label": "t:sections.main-blog.settings.show_date.label"
    },
    {
      "type": "checkbox",
      "id": "show_author",
      "default": false,
      "label": "t:sections.main-blog.settings.show_author.label"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ],
  "blocks": [
    {
      "type": "tag",
      "name": "Tag Filter",
      "settings": [
        {
          "type": "text",
          "id": "tag",
          "label": "Tag",
          "info": "Enter the tag exactly as it appears on articles"
        },
        {
          "type": "text",
          "id": "label",
          "label": "Display label (optional)",
          "info": "Leave blank to use the tag name"
        }
      ]
    },
    {
      "type": "nue_bundle_3_column",
      "name": "NUE Bundle 3 Column",
      "settings": [
        {
          "type": "select",
          "id": "tag_visibility",
          "label": "Show on tag",
          "info": "Display this bundle when viewing this tag filter",
          "default": "all",
          "options": [
            {
              "value": "all",
              "label": "All (Show on all tags)"
            },
            {
              "value": "gut",
              "label": "Gut"
            },
            {
              "value": "skin",
              "label": "Skin"
            },
            {
              "value": "body",
              "label": "Body"
            },
            {
              "value": "fragrance",
              "label": "Fragrance"
            },
            {
              "value": "lifestyle",
              "label": "Lifestyle"
            }
          ]
        },
        {
          "type": "range",
          "id": "row_position",
          "min": 1,
          "max": 10,
          "step": 1,
          "default": 2,
          "label": "Row position",
          "info": "Which row to display this bundle in"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Title",
          "default": "Gut Method"
        },
        {
          "type": "text",
          "id": "price",
          "label": "Price",
          "default": "$68"
        },
        {
          "type": "text",
          "id": "rating",
          "label": "Rating",
          "default": "4.9 Rating"
        },
        {
          "type": "textarea",
          "id": "description",
          "label": "Description",
          "default": "Support the foundation of your overall health—your gut—with our bestselling duo, expertly formulated to ease bloating and promote better digestion, mood, sleep, skin, and immunity."
        },
        {
          "type": "product",
          "id": "product",
          "label": "Product"
        },
        {
          "type": "text",
          "id": "button_label",
          "label": "Button label",
          "default": "Add Method to Cart"
        },
        {
          "type": "image_picker",
          "id": "image_1",
          "label": "Image 1"
        },
        {
          "type": "image_picker",
          "id": "image_2",
          "label": "Image 2"
        },
        {
          "type": "checkbox",
          "id": "full_width",
          "label": "Full Width",
          "default": true,
          "info": "When enabled, the color scheme will apply to the full width container"
        },
        {
          "type": "color_scheme",
          "id": "color_scheme",
          "label": "Color scheme",
          "default": "scheme-1"
        }
      ]
    },
    {
      "type": "quote_block",
      "name": "Quote Block",
      "settings": [
        {
          "type": "select",
          "id": "tag_visibility",
          "label": "Show on tag",
          "info": "Display this quote when viewing this tag filter",
          "default": "all",
          "options": [
            {
              "value": "all",
              "label": "All (Show on all tags)"
            },
            {
              "value": "gut",
              "label": "Gut"
            },
            {
              "value": "skin",
              "label": "Skin"
            },
            {
              "value": "body",
              "label": "Body"
            },
            {
              "value": "fragrance",
              "label": "Fragrance"
            },
            {
              "value": "lifestyle",
              "label": "Lifestyle"
            }
          ]
        },
        {
          "type": "range",
          "id": "row_position",
          "min": 1,
          "max": 10,
          "step": 1,
          "default": 2,
          "label": "Row position",
          "info": "Which row to display this quote in"
        },
        {
          "type": "textarea",
          "id": "quote",
          "label": "Quote",
          "default": "\"This product has completely transformed my daily routine.\""
        },
        {
          "type": "text",
          "id": "author",
          "label": "Author",
          "default": "Sarah M."
        }
      ]
    }
  ]
}
{% endschema %}
